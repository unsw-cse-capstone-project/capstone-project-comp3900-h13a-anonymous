Week 1
Group formed. As a group, we discussed what project our group is going to do and finally decided to do investment simulator project. We started a draft user story and 
discussed what programming language we are using. My plan next week: finish the user story as a group and explore the finnhub api

Week 2
Successfully set up our group Jira account and our group github classroom repo. During our group meeting, we finished our user story and put them on our Jira account. I
have been reading the api document and trying out some interesting examples using finnhub api. I can now successfully retrieve the real-time stock price for a valid
given stock code. My plan next week: start working on project proposal and get it done by end of week 3, continuing exploring the api and try to accomplish a prototype
that can fulfill the basic functionality related to finnhub api

Week 3
Done Project Proposal. Gained more understanding of how the api is working and understand the data returned by the api. Next week: initialize the project
started code and test on api connection

Week 4
Done sprint 1. Initialised project starter code. Successfully done the search for stock code and get historical data from api on backend. The historical 
data can be viewed as a static graph. Next week: work on how to link up the frontend and the backend. Figure out a way to display an dynamic graph. 

Week 5
Done sprint 2. Started and done the setting and removing watchprice on backend. Successfully done generating a dynamic graph in html format. 
Next week: try to connect the watchprice with the frontend, figure out a way to put this generated html graph into our application

Week 6
Done sprint 3. Updated the watchprice function, use multi-thread handling to consistently checking current price. Each watchprice will have a 
thread to continuously checking the price from api. Successfully embed a html graph in a html file. Next week: try to connect the watchprice with the 
frontend, figure out a way to put this generated html graph into our application

Week 7
Done sprint 4. Successfully embedded the html graph into our Django application by altering the url. Write tests for our entire backend. Tests 
can only run for api-related functions. Tests for databased-related functions will raise import error. Next week: find out a way to bypass this
import error and finish all the tests. Find out a way to start all the unfinished thread(thread killed since the last time the server stoped) on startup time.

Week 8
Done sprint 5. Done starting all the threads unfinished on startup time when the server loads. Done all the tests for the entire backend. Refactored
some of the code. Next week: finish the project and write project report.

Week 9
Fixe some small bugs of project. Project done. Deployed the final version to Heroku on https://invest-simu.herokuapp.com . Done the project report

Week 10
Prepare for project demo


